apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.12"
}

// Force Jacoco Version

tasks.withType(Test).configureEach {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

final flavor = "Gplay"
final buildType = "Debug"
final variant = "$flavor${buildType.capitalize()}"
final taskName = "jacocoTest${variant.capitalize()}UnitTestReport"

tasks.register("$taskName", JacocoReport) {
    dependsOn "test${buildType.capitalize()}UnitTest", "create${buildType.capitalize()}UnitTestCoverageReport"

    reports {
        csv.required = Boolean.FALSE
        xml.required = Boolean.TRUE
        html.required = Boolean.FALSE
    }

    final fileFilter = [
            // data binding
            '**/databinding/*',
            'android/databinding/**/*.class',
            '**/android/databinding/*Binding.class',
            '**/android/databinding/*',
            '**/androidx/databinding/*',
            '**/BR.*',

            // android
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',

            // kotlin
            '**/*MapperImpl*.*',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/*Component*.*',
            '**/*BR*.*',
            '**/Manifest*.*',
            '**/*$Lambda$*.*',
            '**/*Companion*.*',
            '**/*Module*.*',
            '**/*Dagger*.*',
            '**/*Hilt*.*',
            '**/*MembersInjector*.*',
            '**/*_MembersInjector.class',
            '**/*_Factory*.*',
            '**/*_Provide*Factory*.*',
            '**/*Extensions*.*',
            // sealed and data classes
            '**/*$Result.*',
            '**/*$Result$*.*',
            // adapters generated by moshi
            '**/*JsonAdapter.*',
            // Hilt
            '**/*Module.kt',
            '**/di/**',
            'dagger.hilt.internal/*',
            'hilt_aggregated_deps/*',

            '**/*$Result.*', /* filtering `sealed` and `data` classes */
            '**/*$Result$*.*',/* filtering `sealed` and `data` classes */
            '**/*Args*.*', /* filtering Navigation Component generated classes */
            '**/*Directions*.*', /* filtering Navigation Component generated classes */
            '**/*inlined*.class', /* filtering inlined classes */
            '**/composables/**'
            /* INSERT ANY OTHER JUNK YOU WANT FILTERED OUT HERE */
    ]

    final androidKotlinTree = fileTree(dir: "${project.layout.buildDirectory}/tmp/kotlin-classes/${variant}", excludes: fileFilter)
    final kotlinTree = fileTree(dir: "${project.layout.buildDirectory}/classes/kotlin/main", excludes: fileFilter)
    final javacTree = fileTree(dir: "${project.layout.buildDirectory}/intermediates/javac/${variant}/classes", excludes: fileFilter)

    final mainSrc = "${project.projectDir}/src/main/java"
    final productFlavorSrc = "${project.projectDir}/src/${flavor}/java"
    final buildTypeSrc = "${project.projectDir}/src/${buildType}/java"

    sourceDirectories.setFrom files([mainSrc, productFlavorSrc, buildTypeSrc])
    classDirectories.setFrom files([androidKotlinTree, kotlinTree, javacTree])
    executionData.setFrom fileTree(dir: project.layout.buildDirectory, includes: [
            "jacoco/test${variant.capitalize()}UnitTest.exec",
            "outputs/unit_test_code_coverage/${variant}UnitTest/test${variant.capitalize()}UnitTest.exec",
    ])
}